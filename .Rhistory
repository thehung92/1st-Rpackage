library(roxygen2)
roxygenise()
roxygenise()
roxygenise()
roxygenise()
load_all(".")
roxygenise()
#!/usr/bin/env Rscript
library(devtools)
library(roxygen2)
#
load_all(".")
# unload lib
detach("package:SCCTempConverter", unload=TRUE)
# make help file
roxygenise()
F_to_C(20)
?F_to_C()
?C_to_F
??data.table
#!/usr/bin/env Rscript
library(devtools)
library(roxygen2)
devtools::document()
devtools::document()
# making binary data available
x <- c(1:10)
devtools::use_data(x)
?use_data
usethis::use_data(x)
?use_vignette
# making raw data available
# mkdir -p inst/extdata/
data("iris")
?fwrite
# making raw data available
# mkdir -p inst/extdata/
data("iris")
data.table::fwrite(iris, file="inst/extdata/raw-1.tsv", quote=FALSE, sep="\t")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/hung/Data/side-project/misc-Rpackage/")
df <- data.frame(dose=c("D0.5", "D1", "D2"),
len=c(4.2, 10, 29.5))
p<-ggplot(data=df, aes(x=dose, y=len)) +
geom_bar(stat="identity")
library(tidyverse)
library(data.table)
library(openxlsx)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/hung/Data/side-project/misc-Rpackage/")
df <- data.frame(dose=c("D0.5", "D1", "D2"),
len=c(4.2, 10, 29.5))
p<-ggplot(data=df, aes(x=dose, y=len)) +
geom_bar(stat="identity")
p<-ggplot(data=df, aes(x=dose, y=len)) +
geom_bar(stat="identity")
p
p<-ggplot(data=df, aes(x=dose, y=len)) +
geom_bar(stat="identity") +
theme(text=element_text(family="sans", size=6),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"))
p
p<-ggplot(data=df, aes(x=dose, y=len)) +
geom_bar(stat="identity") +
theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"))
p
p <- ggplot(data=df, aes(x=dose, y=len)) +
geom_bar(stat="identity")
p + theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"))
theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"))
theme_misc <- function() {
theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"))
}
#
p + theme_misc
?element_text
theme_misc <- function() {
ggplot2::theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"))
}
#
p + theme_misc
p + theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"))
#
p + theme_misc()
devtools::document()
devtools::document()
devtools::document()
rm(list = c("theme_misc"))
devtools::document()
#!/usr/bin/env Rscript
#
#devtools::install_github("thehung92/miscRpackage")
#
#library(ggplot2)
library(miscRpackage)
#
df <- data.frame(dose=c("D0.5", "D1", "D2"), len=c(4.2, 10, 29.5))
p <- ggplot(data=df, aes(x=dose, y=len)) + geom_bar(stat="identity")
p + theme_misc()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/hung/Data/side-project/misc-Rpackage/")
library(tidyverse)
library(data.table)
library(openxlsx)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/hung/Data/side-project/misc-Rpackage/")
df <- data.frame(dose=c("D0.5", "D1", "D2"),
len=c(4.2, 10, 29.5))
p <- ggplot(data=df, aes(x=dose, y=len)) +
geom_bar(stat="identity")
p + theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"))
p <- ggplot(data=df, aes(x=dose, y=len, fill=dose)) +
geom_bar(stat="identity")
p + theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"))
ToothGrowth
df <- data("ToothGrowth")
p <- ggplot(data=df, aes(x=dose, y=len, fill=dose)) +
geom_bar(stat="identity")
p <- ggplot(data=df, aes(x=dose, y=len, fill=dose)) +
geom_boxplot()
df <- data("ToothGrowth")
p <- ggplot(data=df, aes(x=dose, y=len, fill=dose)) +
geom_boxplot()
df
data("ToothGrowth")
df <- data(ToothGrowth)
data(ToothGrowth)
ToothGrowth
df <- ToothGrowth
p <- ggplot(data=df, aes(x=dose, y=len, fill=dose)) +
geom_boxplot()
#
p + theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"))
p <- ggplot(data=df, aes(x=dose, y=len, group=dose)) +
geom_boxplot()
#
p + theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"))
p <- ggplot(data=df, aes(x=dose, y=len, group=dose, color=dose)) +
geom_boxplot()
#
p + theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"))
p <- ggplot(data=df, aes(x=dose, y=len, group=dose, fil=dose)) +
geom_boxplot()
#
p + theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"))
p <- ggplot(data=df, aes(x=dose, y=len, color=dose)) +
geom_boxplot()
#
p + theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"))
p <- ggplot(ToothGrowth, aes(x=dose, y=len, color=dose)) +
geom_boxplot()
#
p + theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"))
p
p <- ggplot(ToothGrowth, aes(x=dose, y=len, color=dose)) +
geom_boxplot()
p
p <- ggplot(ToothGrowth, aes(x=dose, y=len, group=dose, color=dose)) +
geom_boxplot()
p
df <- ToothGrowth %>%
mutate(dose=as.factor(dose))
p <- ggplot(df, aes(x=dose, y=len, group=dose, color=dose)) +
geom_boxplot()
p
?legend
#
p + theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"))
p <- ggplot(df, aes(x=dose, y=len, group=dose, color=dose)) +
geom_boxplot()
#
p + theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"))
?theme
#
p + theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"),
legend.key.size=c(9,9),
legend.key = element_rect(fill=NA)
)
#
p + theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"),
legend.key.size=c(9,9),
legend.key = element_rect(fill=NA)
)
?unit
#
p + theme(text=element_text(family="sans", size=6),
panel.background=element_rect(fill=NA),
panel.border=element_rect(fill=NA, size=0.25, color="black"),
panel.grid=element_line(size=0.1, color="grey75"),
legend.key.size=unit(c(9,9), "points"),
legend.key = element_rect(fill=NA)
)
library(devtools)
library(usethis)
roxygen2::roxygenise()
devtools::document()
devtools::document()
devtools::document()\
devtools::document()
library(devtools)
devtools::load_all(".")
get_symbols()
?get_symbols
get_symbols()
devtools::load_all(".")
get_symbols()
get_symbols(wheel=1:7)
trunc(9.63)
trunc(9.6334235)
trunc(9.)
trunc(9.9)
use_mit_license(name = "Hung Nguyen")
usethis::use_mit_license(name = "Hung Nguyen")
?use_mit_license
library(devtools)
library(devtools)
library(testthat)
library(usethis)
#
usethis::use_testthat()
use_test("get_symbols")
# create a real vector of symbol to test
symbols <- c("7", "7", "7")
# create a real vector of symbol to test
symbols <- c("7", "7", "7")
unique(symbols)
# write test
length(unique(symbols)) == 1
# write test in this block
# length(unique(symbols)) == 1
all(symbols %in% c("B", "BB", "BBB"))
symbols <- c("B", "BB", "BBB")
# write test in this block
# length(unique(symbols)) == 1
all(symbols %in% c("B", "BB", "BBB"))
# create lookup table before going to condition
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25,
"B" = 10, "C" = 10, "0" = 0)
payouts["B"]
payouts["B"] |> uname()
payouts["B"] |> unname()
payouts["B"] |> unname()
symbols
payouts[symbols[1]]
payouts[symbols[1]] |> unname()
payouts[symbols |> unname()
#
if(same) {
prize <- # look up the prize
} else if ( bars ) {
prize <- # assign a prize
} else {
# count cherries
prize <- # calculate a prize
}
#
}
payouts[symbols] |> unname()
prize <- payouts[symbols[1]] |> unname()
#' Slot machine
#'
#' tutorial in R for programs and simulations
#' url: https://rstudio-education.github.io/hopr/project-3-slot-machine.html
#'
#' @export
play <- function(){
# gen symbol
symbols <- get_symbols()
print(symbols)
# score the symbol
prize <- score(symbols)
print(prize)
return(prize)
}
#' Get random symbol from vector
#'
#' simulate the return of the slot machine value
#' also declare the probability of return of each symbol
#'
#' @return obj a vector of 3 element character
#' @examples
#' get_symbols()
#' @export
get_symbols <- function(...) {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
obj <- sample(wheel, size = 3, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
return(obj)
}
#' Score the prize from symbols
#'
#' calculate prize based on multiple condition
#'
#' @param symbols a vector of 3 element
#' @return `prize` money value
#' @export
score <- function(symbols) {
# write test case in this block
same <- length(unique(symbols)) == 1
bars <- all(symbols %in% c("B", "BB", "BBB"))
# create lookup table before going to condition
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25,
"B" = 10, "C" = 10, "0" = 0)
#
if(same) {
prize <- payouts[symbols[1]] |> unname()
} else if ( bars ) {
prize <- 5
} else {
# count cherries
cherries <- sum(symbols == "C")
prize <- c(0, 2, 5)[cherries + 1]
}
# count diamond
diamonds <- sum(symbols == "DD")
# double the price if necessary
prize <- prize * 2 ^ diamonds
return(prize)
}
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
devtools::load_all(".")
devtools::load_all(".")
play()
play()
play()
play()
play()
print(100)
print('100')
deck
rm(list=ls())
devtools::load_all(".")
play()
devtools::load_all(".")
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
?structure
devtools::load_all(".")
play()
.Random.seed
.Random.seed
.Random.seed[1]
.Random.seed[1]
.Random.seed[1]
?.Random.seed
devtools::load_all(".")
devtools::load_all(".")
slot_display(play())
play()
sample(1:100, 1)
devtools::load_all(".")
play()
play()
play()
play()
slot_display(play())
play() |> slot_display()
methods(print)
?structure
devtools::load_all(".")
play()
class(play())
class(tibble())
str(tibble())
?Class
?class
args(print)
devtools::load_all(".")
play()
oneplay <- play()
class(oneplay)
devtools::load_all(".")
print(oneplay)
class(oneplay) <- "slotsMachine"
oneplay
print.slotsMachine()
attributes(oneplay)
#' S3 print method for class 'slotsMachine'
#'
#' need to be name print.slotsMachine
#' method need to take the same argument as print. `args(print)`
#' @export
print.slotsMachine <- function(x, ...) {
cat("I'm using the print.slots method")
}
print(oneplay)
rm(list=ls())
devtools::load_all(".")
print(play())
devtools::load_all(".")
devtools::load_all(".")
print(play())
devtools::load_all(".")
print(play())
ls()
mtcars
data(mtcars)
class(mtcats)
class(mtcars)
inherits(mtcars, 'data.frame')
# collapse symbols into single string
symbols <- paste(symbols, collapse = " ")
a <- 1
class(a) <- 'select'
a
rm(a)
